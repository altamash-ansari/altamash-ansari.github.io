{"version":3,"sources":["Tags.js","FormBuilderView.js","Formbuilder.js","App.js","serviceWorker.js","index.js"],"names":["Tags","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onChange","e","setState","tagInput","target","value","onKeyDown","key","id","concat","uid","state","tags","length","onTagAdd","onTagRemove","_this2","react_default","a","createElement","map","item","i","onClick","bind","nextProps","prevState","React","Component","FormBuilderView","data","schema","fieldSchema","parent_uid","multiple","type","fieldDataArr","label","src_Tags","onAdd","fieldData","index","onDelete","onMixedChange","metadata","textArea","required","placeholder","enum","val","checked","keys","keyChange","FormBuilder","delta","assignValue","obj","pathArr","fieldID","currentPath","isNaN","shift","indexArr","split","addValue","push","objectSpread","defineProperty","result","characters","charactersLength","charAt","Math","floor","random","makeid","removeValue","splice","_ref","arguments","undefined","assignMixedValue","tempObj","k","addTagValue","removeTagValue","assign","src_FormBuilderView","rows","JSON","stringify","readOnly","version","App","showForm","onSchemaChange","parse","error","onDataChange","className","defaultValue","Formbuilder","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ee7117c4.chunk.js","sourcesContent":["import React from 'react'\n\nclass Tags extends React.Component {\n  constructor(props){\n    super(props)\n    this.state = {\n      tags    : [],\n      tagInput: \"\"\n    }\n  }\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    if (nextProps.tags.length !== prevState.tags.length) {\n      return {\n        tags: nextProps.tags\n      }\n    }\n\n    return null\n  }\n\n  componentDidMount(){\n    this.setState({\n      tags: this.props.tags\n    })\n  }\n\n  onChange = (e) => {\n    this.setState({\n      tagInput: e.target.value\n    })\n  }\n\n  onKeyDown = (e) => {\n    if(e.key === \"Enter\"){\n      e.target.id = `${this.props.uid}.${this.state.tags.length}`\n      if(e.target.value.length){\n        this.props.onTagAdd && this.props.onTagAdd(e)\n        this.setState({\n          tagInput: \"\"\n        })\n      }\n    }\n    else if(e.key === \"Backspace\"){\n      if(this.state.tagInput.length === 0 && this.state.tags.length) {\n        e.target.id = `${this.props.uid}.${this.state.tags.length}`\n        this.props.onTagRemove && this.props.onTagRemove(-1, e)\n      } \n    }\n  }\n\n  render() {\n    let state = this.state\n\n    return (\n      <div> \n          <ul>  \n            {\n              state.tags.map((item, i) => {\n                return <li\n                  id = { `${this.props.uid}.${i}` }\n                  key = { `${this.props.uid}.${i}` }\n                > {item}\n                <button \n                  id={`${this.props.uid}.${i}_button`}\n                  onClick={this.props.onTagRemove.bind(this, i)}\n                >x</button> </li> \n              })\n            }\n          </ul> \n          <input \n            value    = { state.tagInput } \n            onChange = {this.onChange}\n            onKeyDown= {this.onKeyDown}\n            /> \n      </div>\n    )\n  }\n}\n\nexport default Tags","import React from 'react'\nimport Tags from './Tags'\n\nclass FormBuilderView extends React.Component {\n  render() {\n    let data = this.props.data\n\n    return (\n      this.props.schema.map(fieldSchema => {\n        let uid = fieldSchema.uid\n        if(this.props.parent_uid)\n          uid = `${this.props.parent_uid}.${fieldSchema.uid}`\n\n        if(!fieldSchema.multiple){\n\n          if(fieldSchema.type === \"string\") {\n            if(fieldSchema.metadata) {\n              if(fieldSchema.metadata.textArea) {\n                return (\n                  <div key={uid}>\n                    <label>{fieldSchema.label}</label>\n                    { fieldSchema.required && <span>*</span>}\n                    <textarea \n                      placeholder = {fieldSchema.metadata.placeholder} \n                      id          = {uid} \n                      value       = {data[fieldSchema.uid] || \"\"}\n                      onChange    = {this.props.onChange.bind(this, fieldSchema, this.props.parent_uid)}\n                    ></textarea>\n                    <br></br>\n                  </div>\n                )\n              }\n\n              if(fieldSchema.metadata.enum && fieldSchema.metadata.enum.length) {\n                return (\n                  <div key={uid}>\n                    <label>{fieldSchema.label}</label>\n                    { fieldSchema.required && <span>*</span>}\n                    <select \n                      placeholder = {fieldSchema.metadata.placeholder} \n                      id          = {uid} \n                      value       = {data[fieldSchema.uid]}\n                      onChange    = {this.props.onChange.bind(this, fieldSchema, this.props.parent_uid)}\n                    >\n                      <option val={\"\"}>Select One</option>\n                      {fieldSchema.metadata.enum.map(val => [\n                        <option key={`${uid}.${val}`} value={val}>{val}</option>\n                      ])}\n                    </select>\n                    <br></br>\n                  </div>\n                )\n              }\n            }\n\n            return (\n              <div key={uid}>\n                <label>{fieldSchema.label}</label>\n                { fieldSchema.required && <span>*</span>}\n                <input \n                  type        = \"text\" \n                  placeholder = {fieldSchema.metadata.placeholder} \n                  id          = {uid} \n                  value       = {data[fieldSchema.uid] || \"\"}\n                  onChange    = {this.props.onChange.bind(this, fieldSchema, this.props.parent_uid)}\n                ></input>\n                <br></br>\n              </div>\n            )\n          }\n\n          if(fieldSchema.type === \"boolean\") {\n            return (\n              <div key={uid}>\n                <label>{fieldSchema.label}</label>\n                <input \n                  type     = \"checkbox\" \n                  id       = {uid} \n                  checked  = {data[fieldSchema.uid] || false}\n                  onChange = {this.props.onChange.bind(this, fieldSchema, this.props.parent_uid)}\n                ></input>\n                <br></br>\n              </div>\n            )\n          }\n\n          if(fieldSchema.type === \"group\") {\n            return (\n              <fieldset key={uid}>\n                <legend>{fieldSchema.label}</legend>\n                <FormBuilderView \n                  schema        = {fieldSchema.schema || []} data = {data[fieldSchema.uid] || {}} \n                  id            = {uid} \n                  parent_uid    = {uid}\n                  onChange      = {this.props.onChange}\n                  onAdd         = {this.props.onAdd}\n                  onDelete      = {this.props.onDelete}\n                  onMixedChange = {this.props.onMixedChange}\n                  onTagAdd      = {this.props.onTagAdd}\n                  onTagRemove   = {this.props.onTagRemove}\n                />\n              </fieldset>\n            )\n          }\n\n          if(fieldSchema.type === \"mixed\") {\n            let fieldData = data[fieldSchema.uid] || {};\n\n            return (\n              <fieldset key={uid}>\n                <legend>{fieldSchema.label}</legend>\n                <button \n                  id      = {`${uid}_addbutton`}\n                  onClick = {this.props.onAdd.bind(this, fieldSchema, this.props.parent_uid)}\n                >Add</button>\n                {\n                  Object.keys(fieldData).map((key, index) => {\n                    return (\n                      <div key={`${uid}.${index}`} >\n                        <input \n                          type     = \"text\" \n                          id       = {`${uid}.${key}.key`} \n                          value    = {key}\n                          onChange = {this.props.onMixedChange.bind(this, fieldSchema, this.props.parent_uid, {keyChange: true, key: key})}\n                        ></input>\n                        <input \n                          type     = \"text\" \n                          id       = {`${uid}.${key}.value`} \n                          value    = {fieldData[key] || \"\"}\n                          onChange = {this.props.onMixedChange.bind(this, fieldSchema, this.props.parent_uid, {key: key})}\n                        ></input>\n                        <button \n                          id      = {`${uid}.${key}_delbutton`}\n                          onClick = {this.props.onDelete.bind(this, fieldSchema, this.props.parent_uid, key)}\n                        >Delete</button>\n                      </div>\n                    )\n                  })\n                }\n                <br></br>\n              </fieldset>\n            )\n          }\n        }\n        else {\n          if(fieldSchema.type === \"string\") {\n            let fieldDataArr = data[fieldSchema.uid] || []\n\n            return (\n              <div key={uid}>\n                <label>{fieldSchema.label}</label>\n                <Tags \n                  tags        = {fieldDataArr}\n                  uid         = {uid}\n                  onTagAdd    = {this.props.onTagAdd.bind(this, fieldSchema, this.props.parent_uid)}\n                  onTagRemove = {this.props.onTagRemove.bind(this, fieldSchema, this.props.parent_uid)}\n                />\n                <br></br>\n              </div>\n            )\n          }\n\n          if(fieldSchema.type === \"group\") {\n            let fieldDataArr = data[fieldSchema.uid] || [];\n\n            return (\n              <fieldset key={uid}>\n                <legend>{fieldSchema.label}</legend>\n                <button \n                  id      = {`${uid}_addbutton`}\n                  onClick = {this.props.onAdd.bind(this, fieldSchema, this.props.parent_uid)}\n                >Add</button>\n                {\n                  fieldDataArr.map((fieldData, index) => {\n                    return (\n                      <fieldset key={`${uid}.${index}`} >\n                        <legend>{index}</legend>\n                        <FormBuilderView \n                          schema        = {fieldSchema.schema} \n                          id            = {`${uid}.${index}`} \n                          data          = {(data[fieldSchema.uid] && data[fieldSchema.uid][index]) || {}} \n                          parent_uid    = {`${uid}.${index}`} \n                          onChange      = {this.props.onChange}\n                          onAdd         = {this.props.onAdd}\n                          onDelete      = {this.props.onDelete}\n                          onMixedChange = {this.props.onMixedChange}\n                          onTagAdd      = {this.props.onTagAdd}\n                          onTagRemove   = {this.props.onTagRemove}\n                        />\n                        <button \n                          id      = {`${uid}.${index}_delbutton`}\n                          onClick = {this.props.onDelete.bind(this, fieldSchema, this.props.parent_uid, index)}\n                        >Delete</button>\n                      </fieldset>\n                    )\n                  })\n                }\n                <br></br>\n              </fieldset>\n            )\n          }\n        }\n\n        return null\n      })\n    )\n  }\n}\n\nexport default FormBuilderView","import React from 'react'\nimport FormBuilderView from './FormBuilderView'\nimport './FormBuilder.css';\n\nclass FormBuilder extends React.Component {\n  constructor(props){\n    super(props)\n    this.state = {\n      delta: {}\n    }\n  }\n\n  onChange = (fieldSchema, parent_uid, e) => {\n    let uid = fieldSchema.uid\n\n    if(parent_uid) {\n      uid = `${parent_uid}.${uid}`\n    }\n\n    let delta = this.state.delta\n\n    let value = e.target.type === \"checkbox\" ? e.target.checked : e.target.value\n\n    assignValue(delta, uid.split(\".\"), fieldSchema, e.target.id, value)\n\n    this.setState({\n      delta\n    })\n  }\n\n  onAdd = (fieldSchema, parent_uid, e) => {\n    let uid = fieldSchema.uid\n\n    if(parent_uid) {\n      uid = `${parent_uid}.${uid}`\n    }\n\n    let delta = this.state.delta\n\n    let value = fieldSchema.type === \"string\" ? \"\" : {}\n\n    addValue(delta, uid.split(\".\"), fieldSchema, value)\n\n    this.setState({\n      delta\n    })\n  }\n\n  onDelete = (fieldSchema, parent_uid, index, e) => {\n    let uid = fieldSchema.uid\n\n    if(parent_uid) {\n      uid = `${parent_uid}.${uid}`\n    }\n\n    let delta = this.state.delta\n\n    removeValue(delta, uid.split(\".\"), fieldSchema, index)\n\n    this.setState({\n      delta\n    })\n  }\n\n  onMixedChange = (fieldSchema, parent_uid, {keyChange, key} = {}, e) => {\n    let uid = fieldSchema.uid\n\n    if(parent_uid) {\n      uid = `${parent_uid}.${uid}`\n    }\n\n    let delta = this.state.delta\n\n    assignMixedValue(delta, uid.split(\".\"), fieldSchema, keyChange, key, e.target.value)\n\n    this.setState({\n      delta\n    })\n  }\n\n  onTagAdd = (fieldSchema, parent_uid, e) => {\n    let uid = fieldSchema.uid\n\n    if(parent_uid) {\n      uid = `${parent_uid}.${uid}`\n    }\n\n    let delta = this.state.delta\n\n    addTagValue(delta, uid.split(\".\"), fieldSchema, e.target.value)\n\n    this.setState({\n      delta\n    })\n  }\n\n  onTagRemove = (fieldSchema, parent_uid, index, e) => {\n    let uid = fieldSchema.uid\n\n    if(parent_uid) {\n      uid = `${parent_uid}.${uid}`\n    }\n\n    let delta = this.state.delta\n\n    removeTagValue(delta, uid.split(\".\"), fieldSchema, index)\n\n    this.setState({\n      delta\n    })\n  }\n\n  componentDidMount(){\n    const delta = Object.assign({}, this.props.data)\n\n    this.setState({\n      delta\n    })\n  }\n\n  render() {\n    return (\n      <div id=\"main\">\n        <div id=\"FormBuilderView\">\n          <FormBuilderView \n            schema        = {this.props.schema} \n            data          = {this.state.delta} \n            parent_uid    = {\"\"} \n            onChange      = {this.onChange}\n            onAdd         = {this.onAdd}\n            onDelete      = {this.onDelete}\n            onMixedChange = {this.onMixedChange}\n            onTagAdd      = {this.onTagAdd}\n            onTagRemove   = {this.onTagRemove}\n          />\n        </div>\n        <div id=\"JSONView\">\n          <textarea rows={50} value={JSON.stringify(this.state.delta, null, 2)} readOnly></textarea>\n        </div>\n      </div>\n    )\n  }\n}\n\nfunction assignValue(obj, pathArr, fieldSchema, fieldID, value) {\n  let currentPath  = pathArr[0]\n  // Next path is an interger, so we set it as array\n  if(isNaN(pathArr[1]) && !fieldSchema.multiple) {\n    obj[currentPath] = obj[currentPath] || {}\n  }\n  else {\n    obj[currentPath] = obj[currentPath] || []\n  }\n\n  pathArr.shift()\n  if(pathArr.length) {\n    return assignValue(obj[currentPath], pathArr, fieldSchema, fieldID, value)\n  }\n  else {\n    // string field we need to push the data\n    if(fieldSchema.multiple) {\n      let indexArr = fieldID.split(\".\")\n      obj[currentPath][indexArr[indexArr.length - 1]] = value\n    }\n    else {\n        obj[currentPath] = value\n    }\n  }\n}\n\nfunction addValue(obj, pathArr, fieldSchema, value) {\n  let currentPath  = pathArr[0]\n  // Next path is an interger, so we set it as array\n  if(isNaN(pathArr[1]) && !fieldSchema.multiple) {\n    obj[currentPath] = obj[currentPath] || {}\n  }\n  else {\n    obj[currentPath] = obj[currentPath] || []\n  }\n\n  pathArr.shift()\n  if(pathArr.length) {\n    return addValue(obj[currentPath], pathArr, fieldSchema, value)\n  }\n  else {\n    // string field we need to push the data\n    if(fieldSchema.multiple) {\n      obj[currentPath].push(value)\n    }\n    else if(fieldSchema.type === \"mixed\") {\n      obj[currentPath] = {\n        ...obj[currentPath],\n        [`key_${makeid(5)}`]: \"\"\n      }\n    }\n    else {\n      obj[currentPath] = value\n    }\n  }\n}\n\nfunction removeValue(obj, pathArr, fieldSchema, index) {\n  let currentPath  = pathArr[0]\n\n  pathArr.shift()\n  if(pathArr.length) {\n    return removeValue(obj[currentPath], pathArr, fieldSchema, index)\n  }\n  else if(fieldSchema.type === \"mixed\") {\n    delete obj[currentPath][index]\n  }\n  else {\n    // filtered out the incoming index from array\n    obj[currentPath].splice(index,1)\n  }\n} \n\nfunction assignMixedValue(obj, pathArr, fieldSchema, keyChange, key, value) {\n  let currentPath  = pathArr[0]\n\n  pathArr.shift()\n  if(pathArr.length) {\n    return assignMixedValue(obj[currentPath], pathArr, fieldSchema, keyChange, key, value)\n  }\n  else {\n    if(keyChange){\n      let tempObj = {}\n      Object.keys(obj[currentPath]).map(k => {\n        if(k === key){\n          tempObj[value] = obj[currentPath][k]\n        }\n        else {\n          tempObj[k] = obj[currentPath][k]\n        }\n\n        return null\n      })\n\n      obj[currentPath] = tempObj\n    }\n    else{\n      obj[currentPath][key] = value\n    }\n  }\n}\n\nfunction addTagValue(obj, pathArr, fieldSchema, value){\n  let currentPath  = pathArr[0]\n\n  pathArr.shift()\n  if(pathArr.length){\n    obj[currentPath] = obj[currentPath] || {}\n\n    addTagValue(obj[currentPath], pathArr, fieldSchema, value)\n  }\n  else{\n    obj[currentPath] = obj[currentPath] || []\n    obj[currentPath].push(value)\n  }\n}\n\nfunction removeTagValue(obj, pathArr, fieldSchema, index){\n  let currentPath  = pathArr[0]\n\n  pathArr.shift()\n  if(pathArr.length){\n    obj[currentPath] = obj[currentPath] || {}\n\n    removeTagValue(obj[currentPath], pathArr, fieldSchema, index)\n  }\n  else{\n    obj[currentPath].splice(index,1)\n  }\n}\n\nfunction makeid(length) {\n  var result           = '';\n  var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n  var charactersLength = characters.length;\n  for ( var i = 0; i < length; i++ ) {\n     result += characters.charAt(Math.floor(Math.random() * charactersLength));\n  }\n  return result;\n}\n\nexport default FormBuilder","import React from 'react';\nimport Formbuilder from './Formbuilder';\n// import FilterableProductTable from './FilterableProductTable';\nimport './App.css';\nimport schema from './schema.json';\n\nconst data = {\n  \"version\": \"1.1.1\",\n  // \"latest_app_version\": {\n  //   \"ios_version\": \"1.1.1\"\n  // },\n  // \"app_db_reset\": [\"1.1.1\", \"1.1.2\"],\n  // \"thirdparty_app_deeplink\": [{\n  //   \"app_name\": \"uber\"\n  // },{\n  //   \"app_name\": \"ola\"\n  // }],\n  // \"config\":{\n  //   \"data\": \"adad\",\n  //   \"nba\": \"aa\"\n  // }\n}\n\nclass App extends React.Component {\n  constructor(props){\n    super(props)\n    this.state = {\n      schema  : schema,\n      data    : data,\n      showForm: true\n    }\n  }\n\n  onClick = (e) => {\n    this.setState({\n      showForm: !this.state.showForm\n    })\n  }\n\n  onSchemaChange = (e) => {\n    let schema = this.state.schema\n    try {\n      schema = JSON.parse(e.target.value)\n    } catch (error) {\n\n    }\n\n    this.setState({\n      schema\n    })\n  }\n\n  onDataChange = (e) => {\n    let data = this.state.data\n    try {\n      data = JSON.parse(e.target.value)\n    } catch (error) {\n\n    }\n\n    this.setState({\n      data\n    })\n  }\n\n  render(){\n    return (\n      <div className=\"App\">\n        {\n          !this.state.showForm && <div>\n            <button onClick={this.onClick}>Render Schema</button><br></br>\n            <div className=\"schema\">\n              <label>Schema</label><br></br>\n              <textarea rows={50} defaultValue={JSON.stringify(this.state.schema, null, 2)} onChange={this.onSchemaChange}></textarea>\n            </div>\n            <div className=\"data\">\n              <label>Data</label><br></br>\n              <textarea rows={50} defaultValue={JSON.stringify(this.state.data, null, 2)} onChange={this.onDataChange}></textarea>\n            </div>\n          </div>\n        }\n        {\n          this.state.showForm && <div>\n            <button onClick={this.onClick}>Edit Schema</button>\n            <Formbuilder schema={this.state.schema} data={this.state.data}/>\n          </div>\n        }\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}